{"version":3,"sources":["hooks/useFetchJobs.js","components/Job.js","components/JobsPagination.js","components/SearchForm.js","components/LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","BASE_URL","reducer","state","action","type","jobs","isLoading","payload","error","hasNextPage","Job","job","useState","isOpen","setIsOpen","Card","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","location","Badge","variant","style","wordBreak","source","how_to_apply","href","company_url","rel","target","height","src","company_logo","alt","Text","Button","onClick","Collapse","in","description","JobsPagination","setPage","page","adjustPage","amount","previousPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","full_time","id","label","LoadingSpinner","Spinner","animation","App","setParams","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","get","cancelToken","token","markdown","then","res","data","catch","err","isCancel","cancelToken2","length","cancel","useFetchJobs","Container","e","param","prevParams","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.45114d1c.chunk.js","sourcesContent":["import { useEffect, useReducer } from 'react';\nimport axios from 'axios';\n\nconst ACTIONS = {\n  MAKE_REQUEST: 'make-request',\n  GET_DATA: 'get-data',\n  ERROR: 'error',\n  UPDATE_HAS_NEXT_PAGE: 'update-has-next-page',\n};\n\nconst BASE_URL =\n  'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.MAKE_REQUEST:\n      return { jobs: [], isLoading: true };\n\n    case ACTIONS.GET_DATA:\n      return { ...state, jobs: action.payload.jobs, isLoading: false };\n\n    case ACTIONS.ERROR:\n      return { ...state, isLoading: false, error: action.payload.error };\n\n    case ACTIONS.UPDATE_HAS_NEXT_PAGE:\n      return { ...state, hasNextPage: action.payload.hasNextPage };\n\n    default:\n      return state;\n  }\n}\n\nexport default function (params, page) {\n  const [state, dispatch] = useReducer(reducer, { jobs: [], isLoading: true });\n\n  useEffect(() => {\n    // dispatch make request\n    dispatch({ type: ACTIONS.MAKE_REQUEST });\n\n    // fetch data from API\n    const cancelToken1 = axios.CancelToken.source();\n    axios\n      .get(BASE_URL, {\n        cancelToken: cancelToken1.token,\n        params: { markdown: true, page: page, ...params },\n      })\n      .then((res) => res.data)\n      .then((data) => {\n        // console.log(data);\n        dispatch({\n          type: ACTIONS.GET_DATA,\n          payload: {\n            jobs: data,\n          },\n        });\n      })\n      .catch((err) => {\n        if (axios.isCancel(err)) return;\n        dispatch({\n          type: ACTIONS.ERROR,\n          payload: {\n            error: err,\n          },\n        });\n      });\n\n    // check if hasNextPage\n\n    const cancelToken2 = axios.CancelToken.source();\n    axios\n      .get(BASE_URL, {\n        cancelToken: cancelToken2.token,\n        params: { markdown: true, page: page + 1, ...params },\n      })\n      .then((res) => res.data)\n      .then((data) => {\n        // console.log(data);\n        dispatch({\n          type: ACTIONS.UPDATE_HAS_NEXT_PAGE,\n          payload: {\n            hasNextPage: data?.length > 0,\n          },\n        });\n      })\n      .catch((err) => {\n        if (axios.isCancel(err)) return;\n        dispatch({\n          type: ACTIONS.ERROR,\n          payload: {\n            error: err,\n          },\n        });\n      });\n\n    return () => {\n      cancelToken1.cancel();\n      cancelToken2.cancel();\n    };\n  }, [params, page]);\n\n  return state;\n}\n","import React, { useState } from 'react';\nimport { Card, Badge, Button, Collapse } from 'react-bootstrap';\nimport ReactMarkdown from 'react-markdown';\n\nconst Job = ({ job }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Card className='my-4'>\n      <Card.Body>\n        <div className='d-flex justify-content-between'>\n          <div>\n            <Card.Title>\n              {job.title} -{' '}\n              <span className='text-muted font-weight-light'>\n                {job.company}\n              </span>\n            </Card.Title>\n            <Card.Subtitle>\n              {new Date(job.created_at).toLocaleDateString()} -{' '}\n              <span> {job.location}</span>\n            </Card.Subtitle>\n            <Badge className='mt-2' variant='secondary'>\n              {job.type}\n            </Badge>\n            <div style={{ wordBreak: 'break-all' }} className='mt-2'>\n              <ReactMarkdown source={job.how_to_apply} />\n            </div>\n          </div>\n          <a href={job.company_url} rel='noopener noreferrer' target='_blank'>\n            <img\n              className='d-none d-md-block'\n              height='50'\n              src={job.company_logo}\n              alt={job.company}\n            />\n          </a>\n        </div>\n        <Card.Text>\n          <Button\n            variant='primary'\n            className='mt-2'\n            onClick={() => setIsOpen(!isOpen)}\n          >\n            {isOpen ? 'Hide Details' : 'View Details'}\n          </Button>\n        </Card.Text>\n        <Collapse in={isOpen}>\n          <div className='mt-4'>\n            <ReactMarkdown source={job.description} />\n          </div>\n        </Collapse>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Job;\n","import React from 'react';\nimport { Pagination } from 'react-bootstrap';\nconst JobsPagination = ({ setPage, page, hasNextPage }) => {\n  const adjustPage = (amount) => {\n    setPage((previousPage) => previousPage + amount);\n  };\n  return (\n    <Pagination>\n      {page !== 1 && <Pagination.Prev onClick={() => adjustPage(-1)} />}\n      {page !== 1 && (\n        <Pagination.Item onClick={() => setPage(1)}>{1}</Pagination.Item>\n      )}\n      {page > 2 && <Pagination.Ellipsis />}\n      {page > 2 && (\n        <Pagination.Item onClick={() => adjustPage(-1)}>\n          {page - 1}\n        </Pagination.Item>\n      )}\n      <Pagination.Item active onClick={() => setPage(1)}>\n        {page}\n      </Pagination.Item>\n      {hasNextPage && (\n        <Pagination.Item onClick={() => adjustPage(1)}>\n          {page + 1}\n        </Pagination.Item>\n      )}\n      {hasNextPage && <Pagination.Next onClick={() => adjustPage(1)} />}\n    </Pagination>\n  );\n};\n\nexport default JobsPagination;\n","import React from 'react';\nimport { Form, Col } from 'react-bootstrap';\n\nexport default function SearchForm({ params, onParamChange }) {\n  return (\n    <Form className='mb-4'>\n      <Form.Row className='align-items-end'>\n        <Form.Group as={Col}>\n          <Form.Label>Description</Form.Label>\n          <Form.Control\n            onChange={onParamChange}\n            value={params.description}\n            name='description'\n            type='text'\n          />\n        </Form.Group>\n        <Form.Group as={Col}>\n          <Form.Label>Location</Form.Label>\n          <Form.Control\n            onChange={onParamChange}\n            value={params.location}\n            name='location'\n            type='text'\n          />\n        </Form.Group>\n        <Form.Group as={Col} xs='auto' className='ml-2'>\n          <Form.Check\n            onChange={onParamChange}\n            value={params.full_time}\n            name='full_time'\n            id='full-time'\n            label='Only Full Time'\n            type='checkbox'\n            className='mb-2'\n          />\n        </Form.Group>\n      </Form.Row>\n    </Form>\n  );\n}\n","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\nconst LoadingSpinner = () => {\n  return (\n    <div className='text-center my-auto'>\n      <Spinner animation='border' variant='primary' />\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React, { useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport './App.css';\nimport useFetchJobs from './hooks/useFetchJobs';\nimport Job from './components/Job';\nimport JobsPagination from './components/JobsPagination';\nimport SearchForm from './components/SearchForm';\nimport LoadingSpinner from './components/LoadingSpinner';\n// import jobs from './jobs.json';\n\nfunction App() {\n  const [params, setParams] = useState({});\n  const [page, setPage] = useState(1);\n  const { jobs, isLoading, error, hasNextPage } = useFetchJobs(params, page);\n\n  function handleParamChange(e) {\n    const param = e.target.name;\n    const value = e.target.value;\n    setPage(1);\n    setParams((prevParams) => {\n      return { ...prevParams, [param]: value };\n    });\n  }\n\n  return (\n    <Container className='my-4'>\n      <h1 className='my-2'>Github Jobs</h1>\n\n      <SearchForm params={params} onParamChange={handleParamChange} />\n\n      <div className='main'>\n        {isLoading && <LoadingSpinner />}\n\n        {error && <h3 className='text-center'>Error. Try to refresh again</h3>}\n        {jobs?.length > 0 && (\n          <JobsPagination\n            setPage={setPage}\n            page={page}\n            hasNextPage={hasNextPage}\n          />\n        )}\n\n        {jobs.map((job) => (\n          <Job key={job.id} job={job} />\n        ))}\n        {jobs?.length > 0 && (\n          <JobsPagination\n            setPage={setPage}\n            page={page}\n            hasNextPage={hasNextPage}\n          />\n        )}\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}